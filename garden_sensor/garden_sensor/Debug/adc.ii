# 1 ".././adc.cpp"
# 1 "c:\\devel\\github\\garden_sensor\\garden_sensor\\garden_sensor\\Debug//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 ".././adc.cpp"
# 23 ".././adc.cpp"
# 1 ".././adc.h" 1
# 23 ".././adc.h"
       

# 1 ".././bits.h" 1
# 23 ".././bits.h"
       

# 1 "c:\\devel\\sysgcc\\avr\\lib\\gcc\\avr\\5.3.0\\include\\stdint.h" 1 3 4
# 9 "c:\\devel\\sysgcc\\avr\\lib\\gcc\\avr\\5.3.0\\include\\stdint.h" 3 4
# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\stdint.h" 1 3 4
# 125 "c:\\devel\\sysgcc\\avr\\avr\\include\\stdint.h" 3 4

# 125 "c:\\devel\\sysgcc\\avr\\avr\\include\\stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 146 "c:\\devel\\sysgcc\\avr\\avr\\include\\stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 163 "c:\\devel\\sysgcc\\avr\\avr\\include\\stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 217 "c:\\devel\\sysgcc\\avr\\avr\\include\\stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 277 "c:\\devel\\sysgcc\\avr\\avr\\include\\stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "c:\\devel\\sysgcc\\avr\\lib\\gcc\\avr\\5.3.0\\include\\stdint.h" 2 3 4
# 26 ".././bits.h" 2


# 27 ".././bits.h"
namespace daw {
 template<typename T, typename U>
 constexpr void set_bit( T & value, U bit ) {
  value |= (1u<<bit);
 }

 template<typename T, typename U>
 constexpr void reset_bit( T & value, U bit ) {
  value &= ~(1u<<bit);
 }

 constexpr bool is_set( uint8_t value, uint8_t bit ) {
  return value & (1u << bit);
 }
}
# 26 ".././adc.h" 2
# 1 ".././communications.h" 1
# 23 ".././communications.h"
       



namespace daw {
 template<typename T>
 constexpr T baud_delay( ) {
  return static_cast<T>(1000000)/static_cast<T>(9600);
 }

 template<uint8_t divider>
 constexpr uint8_t get_adc_div_factor( ) {
  static_assert( divider == 2 || divider == 4 || divider == 8 || divider == 16 || divider == 32 || divider == 64 || divider == 128, "Invalid Divider" );
  return
    divider == 2 ? 0b00000001 :
    divider == 4 ? 0b00000010 :
    divider == 8 ? 0b00000011 :
    divider == 16 ? 0b00000100 :
    divider == 32 ? 0b00000101 :
    divider == 64 ? 0b00000110 :
    divider == 128 ? 0b00000111 : 0;
 }
}
# 27 ".././adc.h" 2



namespace daw {
 void adc_init( );
 uint16_t read_adc( );
}
# 24 ".././adc.cpp" 2



# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 1 3
# 99 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\sfr_defs.h" 1 3
# 126 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\sfr_defs.h" 3
# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\inttypes.h" 1 3
# 77 "c:\\devel\\sysgcc\\avr\\avr\\include\\inttypes.h" 3

# 77 "c:\\devel\\sysgcc\\avr\\avr\\include\\inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 127 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\sfr_defs.h" 2 3
# 100 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 2 3
# 408 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 3
# 1 "C:\\Program Files (x86)\\Atmel\\Studio\\7.0\\Packs\\Atmel\\ATtiny_DFP\\1.2.118\\include/avr/iotn84a.h" 1 3
# 409 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 2 3
# 585 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\portpins.h" 1 3
# 586 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\common.h" 1 3
# 588 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\version.h" 1 3
# 590 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 2 3






# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\fuse.h" 1 3
# 239 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\fuse.h" 3
typedef struct
{
    unsigned char low;
    unsigned char high;
    unsigned char extended;
} __fuse_t;
# 597 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 2 3


# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\lock.h" 1 3
# 600 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 2 3
# 28 ".././adc.cpp" 2


# 29 ".././adc.cpp"
namespace daw {
 void adc_init( ) {
  
# 31 ".././adc.cpp" 3
 (*(volatile uint8_t *)((0x06) + 0x20)) 
# 31 ".././adc.cpp"
        |= daw::get_adc_div_factor<64>( );
  daw::set_bit( 
# 32 ".././adc.cpp" 3
               (*(volatile uint8_t *)((0x07) + 0x20))
# 32 ".././adc.cpp"
                    , 
# 32 ".././adc.cpp" 3
                      6 
# 32 ".././adc.cpp"
                            );
  daw::set_bit( 
# 33 ".././adc.cpp" 3
               (*(volatile uint8_t *)((0x07) + 0x20))
# 33 ".././adc.cpp"
                    , 
# 33 ".././adc.cpp" 3
                      4 
# 33 ".././adc.cpp"
                            );
 }

 uint16_t read_adc( ){
  daw::set_bit( 
# 37 ".././adc.cpp" 3
               (*(volatile uint8_t *)((0x06) + 0x20))
# 37 ".././adc.cpp"
                     , 
# 37 ".././adc.cpp" 3
                       7 
# 37 ".././adc.cpp"
                            );
  daw::set_bit( 
# 38 ".././adc.cpp" 3
               (*(volatile uint8_t *)((0x06) + 0x20))
# 38 ".././adc.cpp"
                     , 
# 38 ".././adc.cpp" 3
                       6 
# 38 ".././adc.cpp"
                            );
  while( !daw::is_set( 
# 39 ".././adc.cpp" 3
                      (*(volatile uint8_t *)((0x06) + 0x20))
# 39 ".././adc.cpp"
                            , 
# 39 ".././adc.cpp" 3
                              4 
# 39 ".././adc.cpp"
                                   ) ) { }
  auto result = 
# 40 ".././adc.cpp" 3
               (*(volatile uint8_t *)((0x05) + 0x20))
# 40 ".././adc.cpp"
                   ;
  daw::set_bit( 
# 41 ".././adc.cpp" 3
               (*(volatile uint8_t *)((0x06) + 0x20))
# 41 ".././adc.cpp"
                     , 
# 41 ".././adc.cpp" 3
                       7 
# 41 ".././adc.cpp"
                            );
  return result;
 }
}
