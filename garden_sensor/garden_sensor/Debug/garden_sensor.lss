
garden_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000230  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e33  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c99  00000000  00000000  0000214f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009dd  00000000  00000000  00002de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  000037c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008af  00000000  00000000  000038dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000221  00000000  00000000  0000418b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000043ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	17 c0       	rjmp	.+46     	; 0x32 <__bad_interrupt>
   4:	16 c0       	rjmp	.+44     	; 0x32 <__bad_interrupt>
   6:	15 c0       	rjmp	.+42     	; 0x32 <__bad_interrupt>
   8:	14 c0       	rjmp	.+40     	; 0x32 <__bad_interrupt>
   a:	13 c0       	rjmp	.+38     	; 0x32 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__bad_interrupt>
   e:	11 c0       	rjmp	.+34     	; 0x32 <__bad_interrupt>
  10:	10 c0       	rjmp	.+32     	; 0x32 <__bad_interrupt>
  12:	0f c0       	rjmp	.+30     	; 0x32 <__bad_interrupt>
  14:	0e c0       	rjmp	.+28     	; 0x32 <__bad_interrupt>
  16:	0d c0       	rjmp	.+26     	; 0x32 <__bad_interrupt>
  18:	0c c0       	rjmp	.+24     	; 0x32 <__bad_interrupt>
  1a:	0b c0       	rjmp	.+22     	; 0x32 <__bad_interrupt>
  1c:	0a c0       	rjmp	.+20     	; 0x32 <__bad_interrupt>
  1e:	09 c0       	rjmp	.+18     	; 0x32 <__bad_interrupt>
  20:	08 c0       	rjmp	.+16     	; 0x32 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	13 d0       	rcall	.+38     	; 0x56 <main>
  30:	bb c0       	rjmp	.+374    	; 0x1a8 <_exit>

00000032 <__bad_interrupt>:
  32:	e6 cf       	rjmp	.-52     	; 0x0 <__vectors>

00000034 <_ZN3daw8read_adcEv>:
#include <cstdint>

namespace daw {
	template<typename T, typename U>
	constexpr void set_bit( T & value, U bit ) {
		value |= (1u<<bit);
  34:	37 9a       	sbi	0x06, 7	; 6
  36:	36 9a       	sbi	0x06, 6	; 6
	}

	uint16_t read_adc( ){
		daw::set_bit( ADCSRA, ADEN );	// Set ADC Enable Bit
		daw::set_bit( ADCSRA, ADSC ); //Starts a new conversion
		while( !daw::is_set( ADCSRA, ADIF ) ) { } //Wait until the conversion is done
  38:	34 9b       	sbis	0x06, 4	; 6
  3a:	fe cf       	rjmp	.-4      	; 0x38 <_ZN3daw8read_adcEv+0x4>
		auto result = ADCH;
  3c:	85 b1       	in	r24, 0x05	; 5
  3e:	37 9a       	sbi	0x06, 7	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  40:	2f e7       	ldi	r18, 0x7F	; 127
  42:	3c e0       	ldi	r19, 0x0C	; 12
  44:	94 e6       	ldi	r25, 0x64	; 100
  46:	21 50       	subi	r18, 0x01	; 1
  48:	30 40       	sbci	r19, 0x00	; 0
  4a:	90 40       	sbci	r25, 0x00	; 0
  4c:	e1 f7       	brne	.-8      	; 0x46 <__SREG__+0x7>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <__SREG__+0x11>
  50:	00 00       	nop
		daw::set_bit( ADCSRA, ADEN );	// Unset ADC Enable Bit
		_delay_ms( 4000 );
		return result;
	}
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	08 95       	ret

00000056 <main>:
	auto const do_accessories_disable = daw::on_exit( []( ) { accesories_disable( ); } );	// Ensure they are powered off
	auto const tst = read_sensor( );
	radio_send_adc_value( tst );
}

int main( ) {
  56:	cf 93       	push	r28
  58:	df 93       	push	r29
  5a:	00 d0       	rcall	.+0      	; 0x5c <main+0x6>
  5c:	00 d0       	rcall	.+0      	; 0x5e <main+0x8>
  5e:	cd b7       	in	r28, 0x3d	; 61
  60:	de b7       	in	r29, 0x3e	; 62
	return true;
}

static void setup_chip( ) {
	// Ensure all ports pulled low
	DDRA = 0b001111111;
  62:	8f e7       	ldi	r24, 0x7F	; 127
  64:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0;
  66:	1b ba       	out	0x1b, r1	; 27
	DDRA = 0;
  68:	1a ba       	out	0x1a, r1	; 26
	// Enable pins
	daw::pin_output( ACCESSORIES_PIN );
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	64 d0       	rcall	.+200    	; 0x136 <_ZN3daw10pin_outputEh>
	daw::pin_output( RADIO_PIN );
  6e:	82 e0       	ldi	r24, 0x02	; 2
  70:	62 d0       	rcall	.+196    	; 0x136 <_ZN3daw10pin_outputEh>
	return (((static_cast<uint16_t>(data) << 8) | hi8( crc )) ^ static_cast<uint8_t>(data >> 4) ^ (static_cast<uint16_t>(data) << 3));
}

static void radio_send_adc_value( uint8_t data_value ) {	
	uint8_t const message_sync_bits = 0xAA;	// 1010 1010
	uint8_t const message_preamble[4] = { 1, 2, 3, 4 };
  72:	68 94       	set
  74:	66 24       	eor	r6, r6
  76:	61 f8       	bld	r6, 1
  78:	0f 2e       	mov	r0, r31
  7a:	f3 e0       	ldi	r31, 0x03	; 3
  7c:	7f 2e       	mov	r7, r31
  7e:	f0 2d       	mov	r31, r0
  80:	68 94       	set
  82:	88 24       	eor	r8, r8
  84:	82 f8       	bld	r8, 2
  86:	0f 2e       	mov	r0, r31
  88:	f5 e0       	ldi	r31, 0x05	; 5
  8a:	9f 2e       	mov	r9, r31
  8c:	f0 2d       	mov	r31, r0
  8e:	a1 2c       	mov	r10, r1
	void radio_start_message( );

	template<typename Buffer, typename T>
	void radio_send_bytes( Buffer buffer, T const size ) {
		auto const end = buffer + size;
		while( buffer != end ) {
  90:	7e 01       	movw	r14, r28
  92:	25 e0       	ldi	r18, 0x05	; 5
  94:	e2 0e       	add	r14, r18
  96:	f1 1c       	adc	r15, r1
#include <util/delay.h>

static uint8_t const SERIAL_NUMBER = 0x01;

static void accesories_enable( ) {
	daw::pin_up( ACCESSORIES_PIN );
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	36 d0       	rcall	.+108    	; 0x108 <_ZN3daw6pin_upEh>
static void accesories_disable( ) {
	daw::pin_down( ACCESSORIES_PIN );
}

static uint16_t read_sensor( ) {
	return daw::read_adc( );
  9c:	cb df       	rcall	.-106    	; 0x34 <_ZN3daw8read_adcEv>
  9e:	b8 2e       	mov	r11, r24
	return (((static_cast<uint16_t>(data) << 8) | hi8( crc )) ^ static_cast<uint8_t>(data >> 4) ^ (static_cast<uint16_t>(data) << 3));
}

static void radio_send_adc_value( uint8_t data_value ) {	
	uint8_t const message_sync_bits = 0xAA;	// 1010 1010
	uint8_t const message_preamble[4] = { 1, 2, 3, 4 };
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	89 83       	std	Y+1, r24	; 0x01
  a4:	6a 82       	std	Y+2, r6	; 0x02
  a6:	7b 82       	std	Y+3, r7	; 0x03
  a8:	8c 82       	std	Y+4, r8	; 0x04
  aa:	c9 2c       	mov	r12, r9
  ac:	da 2c       	mov	r13, r10
	auto const crc_init = crc_ccitt_update( 0x81AA, SERIAL_NUMBER );
	auto const crc = crc_ccitt_update( crc_init, data_value );
	
	for( size_t n=0; n<5; ++n ) {
		daw::radio_start_message( );
  ae:	5b d0       	rcall	.+182    	; 0x166 <_ZN3daw19radio_start_messageEv>
			radio_send_byte( *buffer );
  b0:	8a ea       	ldi	r24, 0xAA	; 170
  b2:	5c d0       	rcall	.+184    	; 0x16c <_ZN3daw15radio_send_byteEh>
  b4:	8e 01       	movw	r16, r28
  b6:	0f 5f       	subi	r16, 0xFF	; 255
  b8:	1f 4f       	sbci	r17, 0xFF	; 255
  ba:	f8 01       	movw	r30, r16
  bc:	81 91       	ld	r24, Z+
  be:	8f 01       	movw	r16, r30
  c0:	55 d0       	rcall	.+170    	; 0x16c <_ZN3daw15radio_send_byteEh>
	void radio_start_message( );

	template<typename Buffer, typename T>
	void radio_send_bytes( Buffer buffer, T const size ) {
		auto const end = buffer + size;
		while( buffer != end ) {
  c2:	0e 15       	cp	r16, r14
  c4:	1f 05       	cpc	r17, r15
  c6:	c9 f7       	brne	.-14     	; 0xba <main+0x64>
  c8:	8e 01       	movw	r16, r28
  ca:	0f 5f       	subi	r16, 0xFF	; 255
  cc:	1f 4f       	sbci	r17, 0xFF	; 255
			radio_send_byte( *buffer );
  ce:	f8 01       	movw	r30, r16
  d0:	81 91       	ld	r24, Z+
  d2:	8f 01       	movw	r16, r30
  d4:	4b d0       	rcall	.+150    	; 0x16c <_ZN3daw15radio_send_byteEh>
	void radio_start_message( );

	template<typename Buffer, typename T>
	void radio_send_bytes( Buffer buffer, T const size ) {
		auto const end = buffer + size;
		while( buffer != end ) {
  d6:	0e 15       	cp	r16, r14
  d8:	1f 05       	cpc	r17, r15
  da:	c9 f7       	brne	.-14     	; 0xce <main+0x78>
		daw::radio_send_value( message_sync_bits );
		daw::radio_send_bytes( message_preamble, 4 );
		daw::radio_send_bytes( message_preamble, 4 );
		daw::radio_send_byte( SERIAL_NUMBER );
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	46 d0       	rcall	.+140    	; 0x16c <_ZN3daw15radio_send_byteEh>
		daw::radio_send_byte( data_value );
  e0:	8b 2d       	mov	r24, r11
  e2:	44 d0       	rcall	.+136    	; 0x16c <_ZN3daw15radio_send_byteEh>
		daw::radio_send_byte( crc );
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	42 d0       	rcall	.+132    	; 0x16c <_ZN3daw15radio_send_byteEh>
  e8:	f1 e0       	ldi	r31, 0x01	; 1
  ea:	cf 1a       	sub	r12, r31
  ec:	d1 08       	sbc	r13, r1
	uint8_t const message_sync_bits = 0xAA;	// 1010 1010
	uint8_t const message_preamble[4] = { 1, 2, 3, 4 };
	auto const crc_init = crc_ccitt_update( 0x81AA, SERIAL_NUMBER );
	auto const crc = crc_ccitt_update( crc_init, data_value );
	
	for( size_t n=0; n<5; ++n ) {
  ee:	f9 f6       	brne	.-66     	; 0xae <main+0x58>
static void accesories_enable( ) {
	daw::pin_up( ACCESSORIES_PIN );
}

static void accesories_disable( ) {
	daw::pin_down( ACCESSORIES_PIN );
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	15 d0       	rcall	.+42     	; 0x11e <_ZN3daw8pin_downEh>
  f4:	2f e9       	ldi	r18, 0x9F	; 159
  f6:	8f e0       	ldi	r24, 0x0F	; 15
  f8:	9d e7       	ldi	r25, 0x7D	; 125
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0xa4>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0xae>
 104:	00 00       	nop
 106:	c8 cf       	rjmp	.-112    	; 0x98 <main+0x42>

00000108 <_ZN3daw6pin_upEh>:
	}

	template<typename T, typename U>
	constexpr void reset_bit( T & value, U bit ) {
		value &= ~(1u<<bit);
 108:	9b b3       	in	r25, 0x1b	; 27
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <_ZN3daw6pin_upEh+0xc>
 110:	22 0f       	add	r18, r18
 112:	33 1f       	adc	r19, r19
 114:	8a 95       	dec	r24
 116:	e2 f7       	brpl	.-8      	; 0x110 <_ZN3daw6pin_upEh+0x8>
 118:	29 2b       	or	r18, r25
 11a:	2b bb       	out	0x1b, r18	; 27
 11c:	08 95       	ret

0000011e <_ZN3daw8pin_downEh>:
 11e:	9b b3       	in	r25, 0x1b	; 27
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <_ZN3daw8pin_downEh+0xc>
 126:	22 0f       	add	r18, r18
 128:	33 1f       	adc	r19, r19
 12a:	8a 95       	dec	r24
 12c:	e2 f7       	brpl	.-8      	; 0x126 <_ZN3daw8pin_downEh+0x8>
 12e:	20 95       	com	r18
 130:	29 23       	and	r18, r25
 132:	2b bb       	out	0x1b, r18	; 27
 134:	08 95       	ret

00000136 <_ZN3daw10pin_outputEh>:
#include <cstdint>

namespace daw {
	template<typename T, typename U>
	constexpr void set_bit( T & value, U bit ) {
		value |= (1u<<bit);
 136:	9a b3       	in	r25, 0x1a	; 26
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <_ZN3daw10pin_outputEh+0xc>
 13e:	22 0f       	add	r18, r18
 140:	33 1f       	adc	r19, r19
 142:	8a 95       	dec	r24
 144:	e2 f7       	brpl	.-8      	; 0x13e <_ZN3daw10pin_outputEh+0x8>
 146:	29 2b       	or	r18, r25
 148:	2a bb       	out	0x1a, r18	; 26
 14a:	08 95       	ret

0000014c <_ZN3daw14radio_send_bitEb>:
#include <cstdint>
#include <util/delay.h>

namespace daw {
	void radio_send_bit( bool bit ) {
		if( bit ) {
 14c:	88 23       	and	r24, r24
 14e:	19 f0       	breq	.+6      	; 0x156 <_ZN3daw14radio_send_bitEb+0xa>
			pin_up( RADIO_PIN );
 150:	82 e0       	ldi	r24, 0x02	; 2
 152:	da df       	rcall	.-76     	; 0x108 <_ZN3daw6pin_upEh>
 154:	02 c0       	rjmp	.+4      	; 0x15a <_ZN3daw14radio_send_bitEb+0xe>
			} else {
			pin_down( RADIO_PIN );
 156:	82 e0       	ldi	r24, 0x02	; 2
 158:	e2 df       	rcall	.-60     	; 0x11e <_ZN3daw8pin_downEh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	85 ed       	ldi	r24, 0xD5	; 213
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <_ZN3daw14radio_send_bitEb+0x12>
 162:	00 00       	nop
 164:	08 95       	ret

00000166 <_ZN3daw19radio_start_messageEv>:
		}
		_delay_us( baud_delay<double>( ) );
	}

	void radio_start_message( ) {
		pin_up( RADIO_PIN );
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	cf df       	rcall	.-98     	; 0x108 <_ZN3daw6pin_upEh>
 16a:	08 95       	ret

0000016c <_ZN3daw15radio_send_byteEh>:
	}

	void radio_send_byte( uint8_t value ) {
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	08 2f       	mov	r16, r24
		radio_send_bit( false );	// start bit
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	e9 df       	rcall	.-46     	; 0x14c <_ZN3daw14radio_send_bitEb>
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	d0 e0       	ldi	r29, 0x00	; 0
	constexpr void reset_bit( T & value, U bit ) {
		value &= ~(1u<<bit);
	}

	constexpr bool is_set( uint8_t value, uint8_t bit ) {
		return value & (1u << bit);
 17e:	10 e0       	ldi	r17, 0x00	; 0
 180:	c8 01       	movw	r24, r16
 182:	0c 2e       	mov	r0, r28
 184:	02 c0       	rjmp	.+4      	; 0x18a <_ZN3daw15radio_send_byteEh+0x1e>
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	0a 94       	dec	r0
 18c:	e2 f7       	brpl	.-8      	; 0x186 <_ZN3daw15radio_send_byteEh+0x1a>
		for( uint8_t n = 0; n < 8; ++n ) {
			radio_send_bit( is_set( value, n ) );
 18e:	81 70       	andi	r24, 0x01	; 1
 190:	dd df       	rcall	.-70     	; 0x14c <_ZN3daw14radio_send_bitEb>
 192:	21 96       	adiw	r28, 0x01	; 1
		pin_up( RADIO_PIN );
	}

	void radio_send_byte( uint8_t value ) {
		radio_send_bit( false );	// start bit
		for( uint8_t n = 0; n < 8; ++n ) {
 194:	c8 30       	cpi	r28, 0x08	; 8
 196:	d1 05       	cpc	r29, r1
 198:	99 f7       	brne	.-26     	; 0x180 <_ZN3daw15radio_send_byteEh+0x14>
			radio_send_bit( is_set( value, n ) );
		}
		radio_send_bit( true );	// stop bit
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	d7 df       	rcall	.-82     	; 0x14c <_ZN3daw14radio_send_bitEb>
	}
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	08 95       	ret

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
