# 1 ".././radio.cpp"
# 1 "c:\\devel\\github\\garden_sensor\\garden_sensor\\garden_sensor\\Debug//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 ".././radio.cpp"
# 23 ".././radio.cpp"
# 1 ".././defs.h" 1
# 23 ".././defs.h"
       



# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 1 3
# 99 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\sfr_defs.h" 1 3
# 126 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\sfr_defs.h" 3
# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\inttypes.h" 1 3
# 37 "c:\\devel\\sysgcc\\avr\\avr\\include\\inttypes.h" 3
# 1 "c:\\devel\\sysgcc\\avr\\lib\\gcc\\avr\\5.3.0\\include\\stdint.h" 1 3 4
# 9 "c:\\devel\\sysgcc\\avr\\lib\\gcc\\avr\\5.3.0\\include\\stdint.h" 3 4
# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\stdint.h" 1 3 4
# 125 "c:\\devel\\sysgcc\\avr\\avr\\include\\stdint.h" 3 4

# 125 "c:\\devel\\sysgcc\\avr\\avr\\include\\stdint.h" 3 4
typedef signed int int8_t __attribute__((__mode__(__QI__)));
typedef unsigned int uint8_t __attribute__((__mode__(__QI__)));
typedef signed int int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int uint16_t __attribute__ ((__mode__ (__HI__)));
typedef signed int int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int uint32_t __attribute__ ((__mode__ (__SI__)));

typedef signed int int64_t __attribute__((__mode__(__DI__)));
typedef unsigned int uint64_t __attribute__((__mode__(__DI__)));
# 146 "c:\\devel\\sysgcc\\avr\\avr\\include\\stdint.h" 3 4
typedef int16_t intptr_t;




typedef uint16_t uintptr_t;
# 163 "c:\\devel\\sysgcc\\avr\\avr\\include\\stdint.h" 3 4
typedef int8_t int_least8_t;




typedef uint8_t uint_least8_t;




typedef int16_t int_least16_t;




typedef uint16_t uint_least16_t;




typedef int32_t int_least32_t;




typedef uint32_t uint_least32_t;







typedef int64_t int_least64_t;






typedef uint64_t uint_least64_t;
# 217 "c:\\devel\\sysgcc\\avr\\avr\\include\\stdint.h" 3 4
typedef int8_t int_fast8_t;




typedef uint8_t uint_fast8_t;




typedef int16_t int_fast16_t;




typedef uint16_t uint_fast16_t;




typedef int32_t int_fast32_t;




typedef uint32_t uint_fast32_t;







typedef int64_t int_fast64_t;






typedef uint64_t uint_fast64_t;
# 277 "c:\\devel\\sysgcc\\avr\\avr\\include\\stdint.h" 3 4
typedef int64_t intmax_t;




typedef uint64_t uintmax_t;
# 10 "c:\\devel\\sysgcc\\avr\\lib\\gcc\\avr\\5.3.0\\include\\stdint.h" 2 3 4
# 38 "c:\\devel\\sysgcc\\avr\\avr\\include\\inttypes.h" 2 3
# 77 "c:\\devel\\sysgcc\\avr\\avr\\include\\inttypes.h" 3
typedef int32_t int_farptr_t;



typedef uint32_t uint_farptr_t;
# 127 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\sfr_defs.h" 2 3
# 100 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 2 3
# 408 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 3
# 1 "C:\\Program Files (x86)\\Atmel\\Studio\\7.0\\Packs\\Atmel\\ATtiny_DFP\\1.2.118\\include/avr/iotn84a.h" 1 3
# 409 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 2 3
# 585 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 3
# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\portpins.h" 1 3
# 586 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\common.h" 1 3
# 588 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 2 3

# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\version.h" 1 3
# 590 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 2 3






# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\fuse.h" 1 3
# 239 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\fuse.h" 3
typedef struct
{
    unsigned char low;
    unsigned char high;
    unsigned char extended;
} __fuse_t;
# 597 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 2 3


# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\lock.h" 1 3
# 600 "c:\\devel\\sysgcc\\avr\\avr\\include\\avr\\io.h" 2 3
# 28 ".././defs.h" 2
# 24 ".././radio.cpp" 2

# 1 ".././bits.h" 1
# 23 ".././bits.h"
       




# 27 ".././bits.h"
namespace daw {
 template<typename T, typename U>
 constexpr void set_bit( T & value, U bit ) {
  value |= (1u<<bit);
 }

 template<typename T, typename U>
 constexpr void reset_bit( T & value, U bit ) {
  value &= ~(1u<<bit);
 }

 constexpr bool is_set( uint8_t value, uint8_t bit ) {
  return value & (1u << bit);
 }
}
# 26 ".././radio.cpp" 2
# 1 ".././communications.h" 1
# 23 ".././communications.h"
       



namespace daw {
 template<typename T>
 constexpr T baud_delay( ) {
  return static_cast<T>(1000000)/static_cast<T>(9600);
 }

 template<uint8_t divider>
 constexpr uint8_t get_adc_div_factor( ) {
  static_assert( divider == 2 || divider == 4 || divider == 8 || divider == 16 || divider == 32 || divider == 64 || divider == 128, "Invalid Divider" );
  return
    divider == 2 ? 0b00000001 :
    divider == 4 ? 0b00000010 :
    divider == 8 ? 0b00000011 :
    divider == 16 ? 0b00000100 :
    divider == 32 ? 0b00000101 :
    divider == 64 ? 0b00000110 :
    divider == 128 ? 0b00000111 : 0;
 }
}
# 27 ".././radio.cpp" 2
# 1 ".././pins.h" 1
# 23 ".././pins.h"
       



namespace daw {
 void pin_up( uint8_t pin );
 void pin_down( uint8_t pin );
 void pin_input( uint8_t pin );
 void pin_output( uint8_t pin );
}
# 28 ".././radio.cpp" 2
# 1 ".././radio.h" 1
# 23 ".././radio.h"
       




namespace daw {
 void radio_send_bit( bool bit );
 void radio_send_byte( uint8_t value );
 void radio_start_message( );

 template<typename Buffer, typename T>
 void radio_send_bytes( Buffer buffer, T const size ) {
  auto const end = buffer + size;
  while( buffer != end ) {
   radio_send_byte( *buffer );
   ++buffer;
  }
 }

 template<typename T>
 void radio_send_value( T const & value ) {
  auto ptr = reinterpret_cast<uint8_t const *>(&value);
  radio_send_bytes( ptr, sizeof( T ) );
 }

 template<typename T>
 void radio_start_message( uint8_t const * buffer, T const size ) {
  radio_start_message( );
  radio_send_bytes( buffer, size );
 }
}
# 29 ".././radio.cpp" 2

# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay.h" 1 3
# 45 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay.h" 3
# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay_basic.h" 1 3
# 40 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay_basic.h" 3

# 40 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay_basic.h" 3
static __inline__ void _delay_loop_1(uint8_t __count) __attribute__((__always_inline__));
static __inline__ void _delay_loop_2(uint16_t __count) __attribute__((__always_inline__));
# 80 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay_basic.h" 3
void
_delay_loop_1(uint8_t __count)
{
 __asm__ volatile (
  "1: dec %0" "\n\t"
  "brne 1b"
  : "=r" (__count)
  : "0" (__count)
 );
}
# 102 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay_basic.h" 3
void
_delay_loop_2(uint16_t __count)
{
 __asm__ volatile (
  "1: sbiw %0,1" "\n\t"
  "brne 1b"
  : "=w" (__count)
  : "0" (__count)
 );
}
# 46 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay.h" 2 3
# 1 "c:\\devel\\sysgcc\\avr\\avr\\include\\math.h" 1 3
# 121 "c:\\devel\\sysgcc\\avr\\avr\\include\\math.h" 3
extern "C" {





extern double cos(double __x) __attribute__((__const__));





extern double sin(double __x) __attribute__((__const__));





extern double tan(double __x) __attribute__((__const__));






extern double fabs(double __x) __attribute__((__const__));






extern double fmod(double __x, double __y) __attribute__((__const__));
# 168 "c:\\devel\\sysgcc\\avr\\avr\\include\\math.h" 3
extern double modf(double __x, double *__iptr);


extern float modff (float __x, float *__iptr);




extern double sqrt(double __x) __attribute__((__const__));


extern float sqrtf (float) __attribute__((__const__));




extern double cbrt(double __x) __attribute__((__const__));
# 195 "c:\\devel\\sysgcc\\avr\\avr\\include\\math.h" 3
extern double hypot (double __x, double __y) __attribute__((__const__));







extern double square(double __x) __attribute__((__const__));






extern double floor(double __x) __attribute__((__const__));






extern double ceil(double __x) __attribute__((__const__));
# 235 "c:\\devel\\sysgcc\\avr\\avr\\include\\math.h" 3
extern double frexp(double __x, int *__pexp);







extern double ldexp(double __x, int __exp) __attribute__((__const__));





extern double exp(double __x) __attribute__((__const__));





extern double cosh(double __x) __attribute__((__const__));





extern double sinh(double __x) __attribute__((__const__));





extern double tanh(double __x) __attribute__((__const__));







extern double acos(double __x) __attribute__((__const__));







extern double asin(double __x) __attribute__((__const__));






extern double atan(double __x) __attribute__((__const__));
# 299 "c:\\devel\\sysgcc\\avr\\avr\\include\\math.h" 3
extern double atan2(double __y, double __x) __attribute__((__const__));





extern double log(double __x) __attribute__((__const__));





extern double log10(double __x) __attribute__((__const__));





extern double pow(double __x, double __y) __attribute__((__const__));






extern int isnan(double __x) __attribute__((__const__));
# 334 "c:\\devel\\sysgcc\\avr\\avr\\include\\math.h" 3
extern int isinf(double __x) __attribute__((__const__));






__attribute__((__const__)) static inline int isfinite (double __x)
{
    unsigned char __exp;
    __asm__ (
 "mov	%0, %C1		\n\t"
 "lsl	%0		\n\t"
 "mov	%0, %D1		\n\t"
 "rol	%0		"
 : "=r" (__exp)
 : "r" (__x) );
    return __exp != 0xff;
}






__attribute__((__const__)) static inline double copysign (double __x, double __y)
{
    __asm__ (
 "bst	%D2, 7	\n\t"
 "bld	%D0, 7	"
 : "=r" (__x)
 : "0" (__x), "r" (__y) );
    return __x;
}
# 377 "c:\\devel\\sysgcc\\avr\\avr\\include\\math.h" 3
extern int signbit (double __x) __attribute__((__const__));






extern double fdim (double __x, double __y) __attribute__((__const__));
# 393 "c:\\devel\\sysgcc\\avr\\avr\\include\\math.h" 3
extern double fma (double __x, double __y, double __z) __attribute__((__const__));







extern double fmax (double __x, double __y) __attribute__((__const__));







extern double fmin (double __x, double __y) __attribute__((__const__));






extern double trunc (double __x) __attribute__((__const__));
# 427 "c:\\devel\\sysgcc\\avr\\avr\\include\\math.h" 3
extern double round (double __x) __attribute__((__const__));
# 440 "c:\\devel\\sysgcc\\avr\\avr\\include\\math.h" 3
extern long lround (double __x) __attribute__((__const__));
# 454 "c:\\devel\\sysgcc\\avr\\avr\\include\\math.h" 3
extern long lrint (double __x) __attribute__((__const__));



}
# 47 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay.h" 2 3
# 86 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay.h" 3
static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
# 165 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay.h" 3
void
_delay_ms(double __ms)
{
 double __tmp ;
# 190 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay.h" 3
 uint16_t __ticks;
 __tmp = ((
# 191 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay.h"
          8196000UL
# 191 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay.h" 3
               ) / 4e3) * __ms;
 if (__tmp < 1.0)
  __ticks = 1;
 else if (__tmp > 65535)
 {

  __ticks = (uint16_t) (__ms * 10.0);
  while(__ticks)
  {

   _delay_loop_2(((
# 201 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay.h"
                  8196000UL
# 201 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay.h" 3
                       ) / 4e3) / 10);
   __ticks --;
  }
  return;
 }
 else
  __ticks = (uint16_t)__tmp;
 _delay_loop_2(__ticks);

}
# 254 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay.h" 3
void
_delay_us(double __us)
{
 double __tmp ;
# 279 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay.h" 3
 uint8_t __ticks;
 double __tmp2 ;
 __tmp = ((
# 281 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay.h"
          8196000UL
# 281 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay.h" 3
               ) / 3e6) * __us;
 __tmp2 = ((
# 282 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay.h"
           8196000UL
# 282 "c:\\devel\\sysgcc\\avr\\avr\\include\\util\\delay.h" 3
                ) / 4e6) * __us;
 if (__tmp < 1.0)
  __ticks = 1;
 else if (__tmp2 > 65535)
 {
  _delay_ms(__us / 1000.0);
 }
 else if (__tmp > 255)
 {
  uint16_t __ticks=(uint16_t)__tmp2;
  _delay_loop_2(__ticks);
  return;
 }
 else
  __ticks = (uint8_t)__tmp;
 _delay_loop_1(__ticks);

}
# 31 ".././radio.cpp" 2


# 32 ".././radio.cpp"
namespace daw {
 void radio_send_bit( bool bit ) {
  if( bit ) {
   pin_up( 
# 35 ".././radio.cpp" 3
          2 
# 35 ".././radio.cpp"
                    );
   } else {
   pin_down( 
# 37 ".././radio.cpp" 3
            2 
# 37 ".././radio.cpp"
                      );
  }
  _delay_us( baud_delay<double>( ) );
 }

 void radio_start_message( ) {
  pin_up( 
# 43 ".././radio.cpp" 3
         2 
# 43 ".././radio.cpp"
                   );
 }

 void radio_send_byte( uint8_t value ) {
  radio_send_bit( false );
  for( uint8_t n = 0; n < 8; ++n ) {
   radio_send_bit( is_set( value, n ) );
  }
  radio_send_bit( true );
 }
}
